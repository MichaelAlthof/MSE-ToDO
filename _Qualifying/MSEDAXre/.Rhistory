# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# setting (font, color) for output, depending on choice
font        = "serif" #Helvetica"
res         = 300
max         = 255
grey.colors = c("white",
rgb( 80, 95,108,alpha=108*1.0,maxColorValue = 108),
rgb(  0, 55,108,alpha=140*0.9,maxColorValue = 140),
rgb(  0, 55,108,alpha=180*1.0,maxColorValue = 180)
)
# load data
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
# Computation of frquency table
freq = data.frame()
tab  = c("Yes","No")
for (i.hb in tab) {
for (i.rp in tab) {
for (i.gs in tab) {
if (i.hb == "Yes") {
hb = !is.na(data$hb_commonscore)
} else {
hb = T
}
if (i.rp == "Yes") {
rp = !is.na(data$rp_rank)
} else {
rp = T
}
if (i.gs == "Yes") {
gs = !is.na(data$gs_author)
} else {
gs = T
}
i = dim(freq)[1] + 1
freq[i, "HB"] = i.hb
freq[i, "RP"] = i.rp
freq[i, "GS"] = i.gs
if (i.hb == "Yes" | i.rp == "Yes") {
tmp = dim(data[hb & rp & gs, ])[1]
} else {
tmp = ifelse(i.gs == "Yes", 10000, 0)
}
freq[i, "Freq"] = tmp
}
}
}
freq       = freq[order(freq[,1],freq[,2],freq[,3],decreasing = F),]
colgr      = 1+(freq$HB=="Yes")+(freq$RP=="Yes")+(freq$GS=="Yes")
freq$color = grey.colors[colgr]
m          = freq
# setting (font, color) for output, depending on choice
font           = "serif" # Font Times
width          = 24      # width of plot pdf
height         = 13      # height of plot pdf
fontsize_big   = 44      # font size of the main titles
fontsize_small = 30      # font size of the axes
marg           = 9       # margin
fontsize_cells = 30      # font size of cell labels
# mosaic plot of age groups against Ranking groups
png(file = "ARRmosage.png", width = width, height = height, units = "in", res = res, family = font)
mosaic(~HB + RP + GS, data = m, gp = gpar(fill = m$color), shade = TRUE, direction = c("v","h", "h"),
zero_size = 0, labeling = labeling_values,
gp_text = gpar(fontsize = fontsize_cells,fontface = 2, col = grey.colors[2]),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(c(marg, marg, 1, marg), "lines"), split_vertical = F)
# gp: coloring according to number of merged rankings
dev.off()
# clear variables
rm(list=ls(all=TRUE))
# load library
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# setting (font, color) for output, depending on choice
font        = "serif" #Helvetica"
res         = 300
max         = 255
grey.colors = c("white",
rgb( 80, 95,108,alpha=108*1.0,maxColorValue = 108),
rgb(  0, 55,108,alpha=140*0.9,maxColorValue = 140),
rgb(  0, 55,108,alpha=180*1.0,maxColorValue = 180)
)
# load data
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
# Computation of frquency table
freq = data.frame()
tab  = c("Yes","No")
for (i.hb in tab) {
for (i.rp in tab) {
for (i.gs in tab) {
if (i.hb == "Yes") {
hb = !is.na(data$hb_commonscore)
} else {
hb = T
}
if (i.rp == "Yes") {
rp = !is.na(data$rp_rank)
} else {
rp = T
}
if (i.gs == "Yes") {
gs = !is.na(data$gs_author)
} else {
gs = T
}
i = dim(freq)[1] + 1
freq[i, "HB"] = i.hb
freq[i, "RP"] = i.rp
freq[i, "GS"] = i.gs
if (i.hb == "Yes" | i.rp == "Yes") {
tmp = dim(data[hb & rp & gs, ])[1]
} else {
tmp = ifelse(i.gs == "Yes", 10000, 0)
}
freq[i, "Freq"] = tmp
}
}
}
freq       = freq[order(freq[,1],freq[,2],freq[,3],decreasing = F),]
colgr      = 1+(freq$HB=="Yes")+(freq$RP=="Yes")+(freq$GS=="Yes")
freq$color = grey.colors[colgr]
m          = freq
# setting (font, color) for output, depending on choice
font           = "serif" # Font Times
width          = 24      # width of plot pdf
height         = 13      # height of plot pdf
fontsize_big   = 44      # font size of the main titles
fontsize_small = 30      # font size of the axes
marg           = 9       # margin
fontsize_cells = 30      # font size of cell labels
# mosaic plot of age groups against Ranking groups
png(file = "ARRmosage1.png", width = width, height = height, units = "in", res = res, family = font)
mosaic(~HB + RP + GS, data = m, gp = gpar(fill = m$color), shade = TRUE, direction = c("v","h", "h"),
zero_size = 0, labeling = labeling_values,
gp_text = gpar(fontsize = fontsize_cells,fontface = 2, col = grey.colors[2]),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(c(marg, marg, 1, marg), "lines"), split_vertical = F)
# gp: coloring according to number of merged rankings
dev.off()
# clear variables
rm(list=ls(all=TRUE))
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# define colors
max      = 180
az_red   = rgb(138, 15, 20, alpha = 0.6 * max, maxColorValue = max)
az_green = rgb(0, 87, 44, alpha = 0.65 * max, maxColorValue = max)
az_blue  = rgb(0, 55, 108, alpha = 0.8 * max, maxColorValue = max)
# Setting Image options
font           = "serif" # font Times
fill_color     = c(az_red,az_green,az_blue)
fontsize_big   = 36
fontsize_small = 22
plotsize       = c(16,8)
res            = 300
# load data file
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$age_combined), ]
subagehb = na.exclude(data[order(data$hb_commonscore, decreasing = T),
grep(pattern = "age_combined|hb_commonscore", colnames(data))])
subagerp = na.exclude(data[order(as.numeric(data$rp_average_rank_score), decreasing = F),
grep(pattern = "age_combined|rp_average_rank_score", colnames(data))])
subagegs = na.exclude(data[order(data$gs_total_cites, decreasing = T),
grep(pattern = "age_combined|gs_total_cites",colnames(data))])
# data selection
m        = 600
len      = min(dim(subagehb)[1],dim(subagegs)[1],dim(subagerp)[1])
if (m<=len)len = m
subagehb = subagehb[1:len,]
subagerp = subagerp[1:len,]
subagegs = subagegs[1:len,]
# computing table for mosaic function
count    = data.frame()
ages     = c(35,40,45,50,55,60,65,70)
index    = 1
data1    = data[!is.na(data$age_combined),]
for (i in 1:(length(ages) + 1)) {
for (rank in c("HB", "RP", "GS")) {
tmp = get(paste0("subage", tolower(rank)))
count[index, "X"] = index
if (i == 1) {
count[index, "Age"] = paste0("<", ages[i])
tmp$age_combined
count[index, "Freq"] = dim(tmp[tmp$age_combined <= ages[i], ])[1]
} else {
count[index, "Age"] = paste0(ages[i - 1] + 1, "-", ages[i])
count[index, "Freq"] = dim(tmp[tmp$age_combined <= ages[i] & tmp$age_combined >
ages[i - 1], ])[1]
}
if (i == length(ages) + 1) {
count[index, "Age"] = paste0(ages[i - 1], ">")
count[index, "Freq"] = dim(tmp[tmp$age_combined > ages[i - 1], ])[1]
}
count[index, "Ranking"] = rank
count[index, "HB"] = ifelse(rank == "HB", yes = "Yes", no = "No")
count[index, "RP"] = ifelse(rank == "RP", yes = "Yes", no = "No")
count[index, "GS"] = ifelse(rank == "GS", yes = "Yes", no = "No")
index = index + 1
}
}
count[count$Age == "<35", "Age"] = "<"
png(file = "ARRmosagegr.png", width = plotsize[1], height = plotsize[2], units = "in",
res = res, family = font)
# mosaic plot of age groups against Ranking groups
mosaic(~Age + Ranking, data = count, margins = unit(8, "lines"),
gp = gpar(fill = matrix(rep(fill_color, times = 9),ncol = 3, byrow = T), col = 9),
shade = TRUE, direction = c("v", "h"), spacing = spacing_highlighting(start = unit(1, "lines")),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE)
dev.off()
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Set working directory
setwd("")
# Read data
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
# Score
data.df$Avg         = as.numeric(data.df$Avg)
data.df             = data.df[data.df$Avg != 0,]
data.df$NoBeer      = as.numeric(data.df$NoBeer)
data.df$NoBeer.size = data.df$NoBeer/max(data.df$NoBeer) * 20 + 1
# Classes for color coding
data.df$Avg.class                     = 0
data.df$Avg.class[data.df$Avg >  4]   = 1
data.df$Avg.class[data.df$Avg <= 4]   = 2
data.df$Avg.class[data.df$Avg <= 3.5] = 3
data.df$Avg.class[data.df$Avg <= 3]   = 4
data.df$Avg.class                     = as.factor(data.df$Avg.class)
# Color palette
pal = colorFactor(colorRampPalette( c("green", "red"), space = "rgb")(4),
domain = c("1", "2", "3", "4"))
# Plot
m  =  leaflet(data = data.df) %>% setView(lng = 10.3833, lat = 50.5167, zoom = 6)
m %>% addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius = ~data.df$NoBeer.size,
popup  = ~paste(Brewery, ": ", NoBeer, " beers", Avg, " as avg score",sep = ""),
color  = ~pal(Avg.class),
stroke = FALSE, fillOpacity = 0.8)
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Set working directory
setwd("")
# Read data
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
# Score
data.df$Avg         = as.numeric(data.df$Avg)
data.df             = data.df[data.df$Avg != 0,]
data.df$NoBeer      = as.numeric(data.df$NoBeer)
data.df$NoBeer.size = data.df$NoBeer/max(data.df$NoBeer) * 20 + 1
# Classes for color coding
data.df$Avg.class                     = 0
data.df$Avg.class[data.df$Avg >  4]   = 1
data.df$Avg.class[data.df$Avg <= 4]   = 2
data.df$Avg.class[data.df$Avg <= 3.5] = 3
data.df$Avg.class[data.df$Avg <= 3]   = 4
data.df$Avg.class                     = as.factor(data.df$Avg.class)
# Color palette
pal = colorFactor(colorRampPalette( c("green", "red"), space = "rgb")(4),
domain = c("1", "2", "3", "4"))
# Plot
m  =  leaflet(data = data.df) %>% setView(lng = 10.3833, lat = 50.5167, zoom = 6)
m %>% addProviderTiles("OpenStreetMap.HOT") %>%
addCircleMarkers(lng = ~lon, lat = ~lat, radius = ~data.df$NoBeer.size,
popup  = ~paste(Brewery, ": ", NoBeer, " beers", Avg, " as avg score",sep = ""),
color  = ~pal(Avg.class),
stroke = FALSE, fillOpacity = 0.8)
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# Set working directory
setwd("")
# Read data
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
## Clear history
rm(list = ls(all = TRUE))
graphics.off()
## Install and load packages
libraries = c("leaflet", "htmlwidgets")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
data.df = readRDS("TXTGermanBrewerieslonlat.RDS")
getwd
getwd()
setwd("~/")
getwd()
# needed only for package installation or update
# install.packages("devtools")
library(devtools)
devtools::install_github("lborke/yamldebugger")
# load the package every time you want to use 'yamldebugger'
# install.packages("yamldebugger")
library(yamldebugger)
allKeywords
sort(allKeywords)
"plot" %in% allKeywords
workdir = "C:/Users/nazaretl.sfb649/Documents/GitHub/MSE-ToDo/_Qualifying"
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
workdir = "C:/Users/nazaretl.sfb649/Documents/GitHub/MSE-ToDo/_Qualifying"
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
workdir = "C:/Users/nazaretl.sfb649/Documents/GitHub/MSE-ToDo/_Qualifying"
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
workdir = "C:/Users/nazaretl.sfb649/Documents/GitHub/MSE-ToDo/_Qualifying"
d_init = yaml.debugger.init(workdir, show_keywords = TRUE)
qnames = yaml.debugger.get.qnames(d_init$RootPath)
d_results = yaml.debugger.run(qnames, d_init)
OverView = yaml.debugger.summary(qnames, d_results, summaryType = "mini")
library(formatR)
tidy_dir( "C:/Users/nazaretl.sfb649/Documents/GitHub/MSE-ToDO/_Qualifying", recursive = T)
# Close windows and clear variables
graphics.off()
rm(list = ls(all = T))
theta = seq(0.01, 3, 0.01)  # area to evaluate the pdf
y = 1 - pchisq(10/theta, df = 10)  # cdf
plot(theta, y, xlab = expression(paste("", theta)), "l", col = "blue", cex.lab = 1.5, cex.axis = 1.5, lwd = 3)
# Close windows and clear variables
rm(list = ls(all = TRUE))
graphics.off()
# install/load packages
libraries = c("tseries", "foreign")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
DAX = read.csv("data_DAX091222-111222.csv")
dax1 = DAX[2:(length(DAX[, 7]) - 1), 7]
dax2 = DAX[3:length(DAX[, 7]), 7]
z = log(dax1) - log(dax2)  # log returns
z = (z - mean(z))/sd(z)  # standardisation
jarque.bera.test(z)
setwd("~/GitHub/MSE-ToDO/_Qualifying/MSEJarque-Beratest")
# Close windows and clear variables
rm(list = ls(all = TRUE))
graphics.off()
# install/load packages
libraries = c("tseries", "foreign")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
DAX = read.csv("data_DAX091222-111222.csv")
dax1 = DAX[2:(length(DAX[, 7]) - 1), 7]
dax2 = DAX[3:length(DAX[, 7]), 7]
z = log(dax1) - log(dax2)  # log returns
z = (z - mean(z))/sd(z)  # standardisation
jarque.bera.test(z)
# Close windows and clear variables
rm(list = ls(all = TRUE))
graphics.off()
# install/load packages
libraries = c("truncgof", "foreign")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
DAX = read.csv("data_DAX091222-111222.csv")
dax1 = DAX[2:(length(DAX[, 7]) - 1), 7]
dax2 = DAX[3:length(DAX[, 7]), 7]
z = log(dax1) - log(dax2)  # log returns
ks.test(z, "pnorm", list(mean = 0, sd = 1), H = NA, sim = 500, tol = 1e-05, estfun = NA)
# Close windows and clear variables
rm(list = ls(all = TRUE))
graphics.off()
# install/load packages
libraries = c("foreign")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
das = read.csv("data_DAX091222-111222.csv")
das = das[, 2]  # use DAX series
d = seq(from = as.Date("2009-12-22"), to = as.Date("2011-12-21"), length.out = 515)
plot(das ~ d, xlab = "Time", ylab = "DAX30 Index", pch = 20, cex = 1, cex.axis = 1.2, cex.lab = 1.5, lab = c(3, 3, 0), main = "",
col = "blue4", type = "l")
# Close windows and clear variables
graphics.off()
rm(list = ls(all = T))
theta = seq(0.01, 3, 0.01)  # area to evaluate the pdf
y = 1 - pchisq(10/theta, df = 10)  # cdf
plot(theta, y, xlab = expression(paste("", theta)), "l", col = "blue", cex.lab = 1.5, cex.axis = 1.5, lwd = 3)
rm(list = ls(all = T))
graphics.off()
y = c(9, 11, 10, 12, 7, 11, 12, 10, 11, 13, 10, 15, 11, 15, 15, 13, 7, 15, 13, 10, 18, 14, 17, 9, 14, 17, 16, 14, 17, 15)
a = rep(0, times = 10)
b = rep(1, times = 10)
x2 = c(a, b, a)
x3 = c(a, a, b)
lm1 = lm(y ~ x2 + x3)  # linear model y = b0 + b1*x2 + b2*x3
summary(lm1)
anova(lm1)
# clear history
rm(list = ls(all = TRUE))
graphics.off()
# install/load packages
libraries = c("foreign", "nortest")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
DAX = read.csv("data_DAX091222-111222.csv")
dax1 = DAX[2:(length(DAX[, 7]) - 1), 7]
dax2 = DAX[3:length(DAX[, 7]), 7]
z = log(dax1) - log(dax2)
cvm.test(z)
# clear history
rm(list = ls(all = TRUE))
graphics.off()
# install/load packages
libraries = c("foreign", "stats")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
DAXall = read.csv("DAX20000101-20111231.csv")
time = seq(from = as.Date("2000-01-03"), to = as.Date("2011-12-27"), length.out = 626)
DAX = DAXall[1:626, 8]
plot(DAX ~ time, xlab = "Time", ylab = "DAX30 Weekly Return", type = "l", pch = 20, cex = 1, cex.axis = 1.2, cex.lab = 1.5,
lab = c(3, 3, 0), main = "", col = "blue4")
DAX1 = DAXall[2:209, 8]
DAX2 = DAXall[210:417, 8]
DAX3 = DAXall[418:626, 8]
var.test(DAX1, DAX2)
var.test(DAX2, DAX3)
var.test(DAX1, DAX3)
setwd("~/GitHub/MSE-ToDO/_Qualifying/MSEDAXre")
# clear history
rm(list = ls(all = TRUE))
graphics.off()
# install/load packages
libraries = c("foreign", "stats")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
DAXall = read.csv("DAX20000101-20111231.csv")
time = seq(from = as.Date("2000-01-03"), to = as.Date("2011-12-27"), length.out = 626)
DAX = DAXall[1:626, 8]
plot(DAX ~ time, xlab = "Time", ylab = "DAX30 Weekly Return", type = "l", pch = 20, cex = 1, cex.axis = 1.2, cex.lab = 1.5,
lab = c(3, 3, 0), main = "", col = "blue4")
DAX1 = DAXall[2:209, 8]
DAX2 = DAXall[210:417, 8]
DAX3 = DAXall[418:626, 8]
var.test(DAX1, DAX2)
var.test(DAX2, DAX3)
var.test(DAX1, DAX3)
# Close windows and clear variables
graphics.off()
rm(list = ls(all = T))
theta = seq(-3, 8, 0.01)
y = 5 * (theta - 1)^2
plot(theta, y, "l", xlab = expression(paste("", tilde(theta))), lwd = 3, ylab = expression(paste("", L(tilde(theta), theta))),
col = "blue", cex.axis = 1.5, xaxs = "i", yaxs = "i", labels = F)
abline(h = 20, col = "blue", lty = 2, lwd = 1)
y = seq(0, 20, 0.01)
theta = -1
points(-1, 20, "h", col = "blue", lty = 2, lwd = 1)
axis(side = 1, at = c(-1), labels = expression(paste("", theta[0] - t[alpha]^{
"-"
})))
axis(side = 1, at = c(1), labels = expression(paste("", theta[0])))
text(-2.8, 27, expression(paste("", t[alpha])))
polygon(c(-3, -3, -1, -1), c(3, 0, 0, 3), density = c(40), angle = c(45), border = NA, col = "blue")
